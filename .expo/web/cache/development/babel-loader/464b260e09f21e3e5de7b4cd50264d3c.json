{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar RoomScreen = function RoomScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showAll = _useState6[0],\n      setShowAll = _useState6[1];\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var response;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(\"https://express-airbnb-api.herokuapp.com/rooms/\" + route.params.id));\n\n            case 3:\n              response = _context.sent;\n              setData(response.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0.message);\n\n            case 10:\n              setIsLoading(false);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    fetchData();\n  }, []);\n  return isLoading ? _jsxs(View, {\n    style: styles.waitScreen,\n    children: [_jsx(Text, {\n      children: \"Request in process\"\n    }), _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    })]\n  }) : _jsxs(ScrollView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      children: [_jsx(Image, {\n        source: {\n          uri: data.photos[0].url\n        },\n        style: styles.roomPic\n      }), _jsxs(Text, {\n        style: styles.price,\n        children: [data.price, \" \\u20AC\"]\n      })]\n    }), _jsx(Text, {\n      numberOfLines: showAll ? 0 : 3,\n      children: data.description\n    }), !showAll && _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        setShowAll(true);\n      },\n      children: _jsx(Text, {\n        children: \"Show More\"\n      })\n    }), _jsx(MapView, {\n      initialRegion: {\n        latitude: data.location[1],\n        longitude: data.location[0],\n        latitudeDelta: 0.1,\n        longitudeDelta: 0.1\n      },\n      style: styles.map,\n      children: _jsx(MapView.Marker, {\n        coordinate: {\n          latitude: data.location[1],\n          longitude: data.location[0]\n        }\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  waitScreen: {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  roomPic: {\n    height: 200,\n    width: Dimensions.get(\"window\").width,\n    position: \"relative\"\n  },\n  price: {\n    position: \"absolute\",\n    bottom: 10,\n    left: 0,\n    backgroundColor: \"black\",\n    color: \"white\",\n    padding: 10\n  },\n  container: {\n    flex: 1\n  },\n  map: {\n    height: 500,\n    width: \"100%\"\n  }\n});\nexport default RoomScreen;","map":{"version":3,"sources":["/Users/vdnj/Documents/le_reacteur/react-native/airbnb/containers/RoomScreen.js"],"names":["useState","useEffect","axios","MapView","PROVIDER_GOOGLE","RoomScreen","route","data","setData","isLoading","setIsLoading","showAll","setShowAll","fetchData","get","params","id","response","console","log","message","styles","waitScreen","container","uri","photos","url","roomPic","price","description","latitude","location","longitude","latitudeDelta","longitudeDelta","map","StyleSheet","create","justifyContent","alignItems","height","width","Dimensions","position","bottom","left","backgroundColor","color","padding","flex"],"mappings":"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","sourcesContent":["import {\n  Text,\n  View,\n  ActivityIndicator,\n  StyleSheet,\n  Image,\n  Dimensions,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\n\nconst RoomScreen = ({ route }) => {\n  const [data, setData] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [showAll, setShowAll] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\n          `https://express-airbnb-api.herokuapp.com/rooms/${route.params.id}`\n        );\n        setData(response.data);\n      } catch (error) {\n        console.log(error.message);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  return isLoading ? (\n    <View style={styles.waitScreen}>\n      <Text>Request in process</Text>\n      <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n    </View>\n  ) : (\n    <ScrollView style={styles.container}>\n      <View>\n        <Image\n          source={{\n            uri: data.photos[0].url,\n          }}\n          style={styles.roomPic}\n        />\n        <Text style={styles.price}>{data.price} â‚¬</Text>\n      </View>\n      <Text numberOfLines={showAll ? 0 : 3}>{data.description}</Text>\n      {!showAll && (\n        <TouchableOpacity\n          onPress={() => {\n            setShowAll(true);\n          }}\n        >\n          <Text>Show More</Text>\n        </TouchableOpacity>\n      )}\n      <MapView\n        // provider={PROVIDER_GOOGLE}\n        initialRegion={{\n          latitude: data.location[1],\n          longitude: data.location[0],\n          latitudeDelta: 0.1,\n          longitudeDelta: 0.1,\n        }}\n        // showsUserLocation={true}\n        style={styles.map}\n      >\n        <MapView.Marker\n          coordinate={{\n            latitude: data.location[1],\n            longitude: data.location[0],\n          }}\n        />\n      </MapView>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  waitScreen: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  roomPic: {\n    height: 200,\n    width: Dimensions.get(\"window\").width,\n    position: \"relative\",\n  },\n  price: {\n    position: \"absolute\",\n    bottom: 10,\n    left: 0,\n    backgroundColor: \"black\",\n    color: \"white\",\n    padding: 10,\n  },\n  container: {\n    flex: 1,\n  },\n  map: {\n    height: 500,\n    width: \"100%\",\n  },\n});\n\nexport default RoomScreen;\n"]},"metadata":{},"sourceType":"module"}