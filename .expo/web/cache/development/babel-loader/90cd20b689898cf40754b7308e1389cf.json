{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SignInScreen(_ref) {\n  var setToken = _ref.setToken;\n  var navigation = useNavigation();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var handleSignInSubmit = function handleSignInSubmit() {\n    return _regeneratorRuntime.async(function handleSignInSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (email && password) {\n              console.log(\"we can send the request\");\n            } else {\n              console.log(\"Not sending request\");\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(View, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Email: \"\n      }), _jsx(TextInput, {\n        placeholder: \"Email\",\n        onChangeText: function onChangeText(mail) {\n          setEmail(mail);\n        }\n      }), _jsx(Text, {\n        children: \"Password: \"\n      }), _jsx(TextInput, {\n        placeholder: \"Password\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(pass) {\n          return setPassword(pass);\n        }\n      }), _jsx(Button, {\n        title: \"Sign in\",\n        onPress: function _callee() {\n          return _regeneratorRuntime.async(function _callee$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  console.log(\"email ===>\", email);\n                  console.log(\"password ===>\", password);\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.navigate(\"SignUp\");\n        },\n        children: _jsx(Text, {\n          children: \"Create an account\"\n        })\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["/Users/vdnj/Documents/le_reacteur/react-native/airbnb/containers/SignInScreen.js"],"names":["useNavigation","useState","SignInScreen","setToken","navigation","email","setEmail","password","setPassword","handleSignInSubmit","console","log","mail","pass","navigate"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,wBAA9B;;;;;;AAEA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,eAAe,SAASC,YAAT,OAAoC;AAAA,MAAZC,QAAY,QAAZA,QAAY;AACjD,MAAMC,UAAU,GAAGJ,aAAa,EAAhC;;AAEA,kBAA0BC,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAgCL,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOM,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AACzB,gBAAIJ,KAAK,IAAIE,QAAb,EAAuB;AACrBG,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,aAFD,MAEO;AACLD,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;AALwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAQA,SACE,KAAC,IAAD;AAAA,cACE,MAAC,IAAD;AAAA,iBACE,KAAC,IAAD;AAAA;AAAA,QADF,EAEE,KAAC,SAAD;AACE,QAAA,WAAW,EAAC,OADd;AAEE,QAAA,YAAY,EAAE,sBAACC,IAAD,EAAU;AACtBN,UAAAA,QAAQ,CAACM,IAAD,CAAR;AACD;AAJH,QAFF,EAQE,KAAC,IAAD;AAAA;AAAA,QARF,EASE,KAAC,SAAD;AACE,QAAA,WAAW,EAAC,UADd;AAEE,QAAA,eAAe,EAAE,IAFnB;AAGE,QAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,iBAAUL,WAAW,CAACK,IAAD,CAArB;AAAA;AAHhB,QATF,EAcE,KAAC,MAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAGPH,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,KAA1B;AACAK,kBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,QAA7B;;AAJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFX,QAdF,EAuBE,KAAC,gBAAD;AACE,QAAA,OAAO,EAAE,mBAAM;AACbH,UAAAA,UAAU,CAACU,QAAX,CAAoB,QAApB;AACD,SAHH;AAAA,kBAKE,KAAC,IAAD;AAAA;AAAA;AALF,QAvBF;AAAA;AADF,IADF;AAmCD","sourcesContent":["import { useNavigation } from \"@react-navigation/core\";\nimport { Button, Text, TextInput, View, TouchableOpacity } from \"react-native\";\nimport { useState } from \"react\";\n\nexport default function SignInScreen({ setToken }) {\n  const navigation = useNavigation();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSignInSubmit = async () => {\n    if (email && password) {\n      console.log(\"we can send the request\");\n    } else {\n      console.log(\"Not sending request\");\n    }\n  };\n\n  return (\n    <View>\n      <View>\n        <Text>Email: </Text>\n        <TextInput\n          placeholder=\"Email\"\n          onChangeText={(mail) => {\n            setEmail(mail);\n          }}\n        />\n        <Text>Password: </Text>\n        <TextInput\n          placeholder=\"Password\"\n          secureTextEntry={true}\n          onChangeText={(pass) => setPassword(pass)}\n        />\n        <Button\n          title=\"Sign in\"\n          onPress={async () => {\n            // const userToken = \"secret-token\";\n            // setToken(userToken);\n            console.log(\"email ===>\", email);\n            console.log(\"password ===>\", password);\n          }}\n        />\n        <TouchableOpacity\n          onPress={() => {\n            navigation.navigate(\"SignUp\");\n          }}\n        >\n          <Text>Create an account</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}