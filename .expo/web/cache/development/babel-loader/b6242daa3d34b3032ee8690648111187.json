{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SignUpScreen(_ref) {\n  var setToken = _ref.setToken;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      username = _useState4[0],\n      setUsername = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      description = _useState6[0],\n      setDescription = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      passwordOne = _useState8[0],\n      setPasswordOne = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      passwordTwo = _useState10[0],\n      setPasswordTwo = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isVisible = _useState12[0],\n      setIsVisible = _useState12[1];\n\n  var handleSignUpSubmit = function handleSignUpSubmit() {\n    return _regeneratorRuntime.async(function handleSignUpSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (passwordOne && passwordOne !== passwordTwo) {\n              Alert.alert(\"Passwords are different\", \"Please type again\");\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(View, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Email: \"\n      }), _jsx(TextInput, {\n        placeholder: \"Email\"\n      }), _jsx(Text, {\n        children: \"Username: \"\n      }), _jsx(TextInput, {\n        placeholder: \"Username\"\n      }), _jsx(Text, {\n        children: \"Description: \"\n      }), _jsx(TextInput, {\n        placeholder: \"Describe yourself in a few words...\",\n        multiline: true,\n        numberOfLines: 4\n      }), _jsx(Text, {\n        children: \"Password: \"\n      }), _jsxs(View, {\n        style: styles.passInput,\n        children: [_jsx(TextInput, {\n          placeholder: \"Password\",\n          secureTextEntry: isVisible ? false : true\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return isVisible ? setIsVisible(false) : setIsVisible(true);\n          },\n          children: _jsx(Text, {\n            children: \"\\uD83D\\uDC41 \"\n          })\n        })]\n      }), _jsx(Text, {\n        children: \"Password: \"\n      }), _jsxs(View, {\n        style: styles.passInput,\n        children: [_jsx(TextInput, {\n          placeholder: \"Confirm password\",\n          secureTextEntry: isVisible ? false : true\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return isVisible ? setIsVisible(false) : setIsVisible(true);\n          },\n          children: _jsx(Text, {\n            children: \"\\uD83D\\uDC41 \"\n          })\n        })]\n      }), _jsx(Button, {\n        title: \"Sign up\",\n        onPress: function _callee() {\n          var userToken;\n          return _regeneratorRuntime.async(function _callee$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  userToken = \"secret-token\";\n                  setToken(userToken);\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  passInput: {\n    flexDirection: \"row\"\n  },\n  waitScreen: {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/vdnj/Documents/le_reacteur/react-native/airbnb/containers/SignUpScreen.js"],"names":["useState","SignUpScreen","setToken","email","setEmail","username","setUsername","description","setDescription","passwordOne","setPasswordOne","passwordTwo","setPasswordTwo","isVisible","setIsVisible","handleSignUpSubmit","Alert","alert","styles","passInput","userToken","StyleSheet","create","flexDirection","waitScreen","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Text,\n  TextInput,\n  View,\n  TouchableOpacity,\n  StyleSheet,\n  Alert,\n} from \"react-native\";\nimport { useState } from \"react\";\n\nexport default function SignUpScreen({ setToken }) {\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [passwordOne, setPasswordOne] = useState(\"\");\n  const [passwordTwo, setPasswordTwo] = useState(\"\");\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleSignUpSubmit = async () => {\n    if (passwordOne && passwordOne !== passwordTwo) {\n      Alert.alert(\"Passwords are different\", \"Please type again\");\n    }\n  };\n\n  return (\n    <View>\n      <View>\n        <Text>Email: </Text>\n        <TextInput placeholder=\"Email\" />\n        <Text>Username: </Text>\n        <TextInput placeholder=\"Username\" />\n        <Text>Description: </Text>\n        <TextInput\n          placeholder=\"Describe yourself in a few words...\"\n          multiline={true}\n          numberOfLines={4}\n        />\n        <Text>Password: </Text>\n        <View style={styles.passInput}>\n          <TextInput\n            placeholder=\"Password\"\n            secureTextEntry={isVisible ? false : true}\n          />\n          <TouchableOpacity\n            onPress={() =>\n              isVisible ? setIsVisible(false) : setIsVisible(true)\n            }\n          >\n            <Text>👁 </Text>\n          </TouchableOpacity>\n        </View>\n        <Text>Password: </Text>\n        <View style={styles.passInput}>\n          <TextInput\n            placeholder=\"Confirm password\"\n            secureTextEntry={isVisible ? false : true}\n          />\n          <TouchableOpacity\n            onPress={() =>\n              isVisible ? setIsVisible(false) : setIsVisible(true)\n            }\n          >\n            <Text>👁 </Text>\n          </TouchableOpacity>\n        </View>\n        <Button\n          title=\"Sign up\"\n          onPress={async () => {\n            const userToken = \"secret-token\";\n            setToken(userToken);\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  passInput: {\n    flexDirection: \"row\",\n  },\n  waitScreen: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}