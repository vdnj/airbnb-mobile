{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SignInScreen(_ref) {\n  var setToken = _ref.setToken;\n  var navigation = useNavigation();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isVisible = _useState6[0],\n      setIsVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      requestProcessing = _useState8[0],\n      setRequestProcessing = _useState8[1];\n\n  var handleSignInSubmit = function handleSignInSubmit() {\n    var response;\n    return _regeneratorRuntime.async(function handleSignInSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(email && password)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.prev = 1;\n            setRequestProcessing(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(\"https://express-airbnb-api.herokuapp.com/user/log_in\", {\n              email: email,\n              password: password\n            }));\n\n          case 5:\n            response = _context.sent;\n            response && Alert.alert(\"Connexion r√©ussie !\");\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            Alert.alert(\"Utilisateur non reconnu\", \"Veuillez vous inscrire\");\n\n          case 12:\n            setRequestProcessing(false);\n            _context.next = 16;\n            break;\n\n          case 15:\n            if (email && !password) {\n              Alert.alert(\"Veuillez renseigner un mot de passe\");\n            } else if (!email && password) {\n              Alert.alert(\"Veuillez renseigner une adresse email\");\n            }\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  return requestProcessing ? _jsx(View, {\n    children: _jsx(Text, {\n      children: \"Request In process\"\n    })\n  }) : _jsx(View, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Email: \"\n      }), _jsx(TextInput, {\n        placeholder: \"Email\",\n        onChangeText: function onChangeText(mail) {\n          setEmail(mail);\n        }\n      }), _jsx(Text, {\n        children: \"Password: \"\n      }), _jsxs(View, {\n        style: styles.passInput,\n        children: [_jsx(TextInput, {\n          placeholder: \"Password\",\n          secureTextEntry: isVisible ? false : true,\n          onChangeText: function onChangeText(pass) {\n            return setPassword(pass);\n          }\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return isVisible ? setIsVisible(false) : setIsVisible(true);\n          },\n          children: _jsx(Text, {\n            children: \"\\uD83D\\uDC41 \"\n          })\n        })]\n      }), _jsx(Button, {\n        title: \"Sign in\",\n        onPress: handleSignInSubmit\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.navigate(\"SignUp\");\n        },\n        children: _jsx(Text, {\n          children: \"Create an account\"\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  passInput: {\n    flexDirection: \"row\"\n  }\n});","map":{"version":3,"sources":["/Users/vdnj/Documents/le_reacteur/react-native/airbnb/containers/SignInScreen.js"],"names":["useNavigation","useState","axios","SignInScreen","setToken","navigation","email","setEmail","password","setPassword","isVisible","setIsVisible","requestProcessing","setRequestProcessing","handleSignInSubmit","post","response","Alert","alert","mail","styles","passInput","pass","navigate","StyleSheet","create","flexDirection"],"mappings":"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","sourcesContent":["import { useNavigation } from \"@react-navigation/core\";\nimport {\n  Button,\n  Text,\n  TextInput,\n  View,\n  TouchableOpacity,\n  Alert,\n  StyleSheet,\n  ActivityIndicator,\n} from \"react-native\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function SignInScreen({ setToken }) {\n  const navigation = useNavigation();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n  const [requestProcessing, setRequestProcessing] = useState(false);\n\n  const handleSignInSubmit = async () => {\n    if (email && password) {\n      try {\n        setRequestProcessing(true);\n        const response = await axios.post(\n          \"https://express-airbnb-api.herokuapp.com/user/log_in\",\n          { email, password }\n        );\n        response && Alert.alert(\"Connexion r√©ussie !\");\n      } catch (error) {\n        Alert.alert(\"Utilisateur non reconnu\", \"Veuillez vous inscrire\");\n      }\n      setRequestProcessing(false);\n    } else if (email && !password) {\n      Alert.alert(\"Veuillez renseigner un mot de passe\");\n    } else if (!email && password) {\n      Alert.alert(\"Veuillez renseigner une adresse email\");\n    }\n  };\n\n  return requestProcessing ? (\n    <View>\n      <Text>Request In process</Text>\n    </View>\n  ) : (\n    <View>\n      <View>\n        <Text>Email: </Text>\n        <TextInput\n          placeholder=\"Email\"\n          onChangeText={(mail) => {\n            setEmail(mail);\n          }}\n        />\n        <Text>Password: </Text>\n        <View style={styles.passInput}>\n          <TextInput\n            placeholder=\"Password\"\n            secureTextEntry={isVisible ? false : true}\n            onChangeText={(pass) => setPassword(pass)}\n          />\n          <TouchableOpacity\n            onPress={() =>\n              isVisible ? setIsVisible(false) : setIsVisible(true)\n            }\n          >\n            <Text>üëÅ </Text>\n          </TouchableOpacity>\n        </View>\n        <Button title=\"Sign in\" onPress={handleSignInSubmit} />\n        <TouchableOpacity\n          onPress={() => {\n            navigation.navigate(\"SignUp\");\n          }}\n        >\n          <Text>Create an account</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  passInput: {\n    flexDirection: \"row\",\n  },\n});\n\n// const userToken = \"secret-token\";\n// setToken(userToken);\n"]},"metadata":{},"sourceType":"module"}