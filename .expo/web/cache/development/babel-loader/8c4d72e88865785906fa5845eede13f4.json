{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as Location from \"expo-location\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AroundMeScreen = function AroundMeScreen() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      latitude = _useState2[0],\n      setLatitude = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      longitude = _useState4[0],\n      setLongitude = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      data = _useState6[0],\n      setData = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoading = _useState8[0],\n      setIsLoading = _useState8[1];\n\n  useEffect(function _callee() {\n    var fetchData;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fetchData = function fetchData() {\n              var _await$Location$reque, status, location, response;\n\n              return _regeneratorRuntime.async(function fetchData$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n                    case 3:\n                      _await$Location$reque = _context.sent;\n                      status = _await$Location$reque.status;\n\n                      if (!(status === \"granted\")) {\n                        _context.next = 13;\n                        break;\n                      }\n\n                      _context.next = 8;\n                      return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n                    case 8:\n                      location = _context.sent;\n                      setLatitude(location.coords.latitude);\n                      setLongitude(location.coords.longitude);\n                      _context.next = 14;\n                      break;\n\n                    case 13:\n                      alert(\"Permission Refusée !\");\n\n                    case 14:\n                      console.log(latitude, longitude);\n                      _context.next = 17;\n                      return _regeneratorRuntime.awrap(axios.get(\"https://express-airbnb-api.herokuapp.com/rooms/around?latitude=\" + latitude + \"&longitude=\" + longitude));\n\n                    case 17:\n                      response = _context.sent;\n                      setData(response.data);\n                      setIsLoading(false);\n                      _context.next = 25;\n                      break;\n\n                    case 22:\n                      _context.prev = 22;\n                      _context.t0 = _context[\"catch\"](0);\n                      console.log(_context.t0.message, \" ==> fetchData\");\n\n                    case 25:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, [[0, 22]], Promise);\n            };\n\n            fetchData();\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [latitude, longitude]);\n  return isLoading ? _jsxs(View, {\n    style: styles.waitScreen,\n    children: [_jsx(Text, {\n      children: \"Request in process\"\n    }), _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    })]\n  }) : _jsx(View, {\n    style: styles.container,\n    children: _jsx(MapView, {\n      initialRegion: {\n        latitude: latitude,\n        longitude: longitude,\n        latitudeDelta: 0.1,\n        longitudeDelta: 0.1\n      },\n      showsUserLocation: true,\n      style: styles.map,\n      children: data.map(function (item, index) {\n        return _jsx(MapView.Marker, {\n          coordinate: {\n            latitude: item.location[1],\n            longitude: item.location[0]\n          }\n        }, index);\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  waitScreen: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  map: {\n    height: 500,\n    width: \"100%\"\n  }\n});\nexport default AroundMeScreen;","map":{"version":3,"sources":["/Users/vdnj/Documents/le_reacteur/react-native/airbnb/containers/AroundMeScreen.js"],"names":["useState","useEffect","axios","Location","MapView","PROVIDER_GOOGLE","AroundMeScreen","latitude","setLatitude","longitude","setLongitude","data","setData","isLoading","setIsLoading","fetchData","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","location","coords","alert","console","log","get","response","message","styles","waitScreen","container","latitudeDelta","longitudeDelta","map","item","index","StyleSheet","create","flex","justifyContent","alignItems","height","width"],"mappings":"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","sourcesContent":["import { View, Text, StyleSheet, ActivityIndicator } from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as Location from \"expo-location\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\n\nconst AroundMeScreen = () => {\n  const [latitude, setLatitude] = useState();\n  const [longitude, setLongitude] = useState();\n  const [data, setData] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  //   function sleep(ms) {\n  //     return new Promise((resolve) => setTimeout(resolve, ms));\n  //   }\n\n  useEffect(async () => {\n    const fetchData = async () => {\n      try {\n        const { status } = await Location.requestForegroundPermissionsAsync();\n\n        if (status === \"granted\") {\n          const location = await Location.getCurrentPositionAsync();\n\n          setLatitude(location.coords.latitude);\n          setLongitude(location.coords.longitude);\n        } else {\n          alert(\"Permission Refusée !\");\n        }\n        console.log(latitude, longitude);\n        const response = await axios.get(\n          `https://express-airbnb-api.herokuapp.com/rooms/around?latitude=${latitude}&longitude=${longitude}`\n        );\n        setData(response.data);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error.message, \" ==> fetchData\");\n      }\n    };\n    fetchData();\n  }, [latitude, longitude]);\n\n  return isLoading ? (\n    <View style={styles.waitScreen}>\n      <Text>Request in process</Text>\n      <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n    </View>\n  ) : (\n    <View style={styles.container}>\n      <MapView\n        // provider={PROVIDER_GOOGLE}\n        initialRegion={{\n          latitude: latitude,\n          longitude: longitude,\n          latitudeDelta: 0.1,\n          longitudeDelta: 0.1,\n        }}\n        showsUserLocation={true}\n        style={styles.map}\n      >\n        {data.map((item, index) => {\n          return (\n            <MapView.Marker\n              key={index}\n              coordinate={{\n                latitude: item.location[1],\n                longitude: item.location[0],\n              }}\n            />\n          );\n        })}\n      </MapView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  waitScreen: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  map: {\n    height: 500,\n    width: \"100%\",\n  },\n});\n\nexport default AroundMeScreen;\n"]},"metadata":{},"sourceType":"module"}