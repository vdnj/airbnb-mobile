{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport HomeScreen from \"./containers/HomeScreen\";\nimport ProfileScreen from \"./containers/ProfileScreen\";\nimport SignInScreen from \"./containers/SignInScreen\";\nimport SignUpScreen from \"./containers/SignUpScreen\";\nimport SettingsScreen from \"./containers/SettingsScreen\";\nimport SplashScreen from \"./containers/SplashScreen\";\nimport RoomScreen from \"./containers/RoomScreen\";\nimport AroundMeScreen from \"./containers/AroundMeScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userToken = _useState4[0],\n      setUserToken = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userId = _useState6[0],\n      setUserId = _useState6[1];\n\n  var setToken = function setToken(token) {\n    return _regeneratorRuntime.async(function setToken$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!token) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"userToken\", token));\n\n          case 3:\n            _context.next = 7;\n            break;\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"userToken\"));\n\n          case 7:\n            setUserToken(token);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setId = function setId(id) {\n    return _regeneratorRuntime.async(function setId$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!id) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"userId\", id));\n\n          case 3:\n            _context2.next = 7;\n            break;\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"userId\"));\n\n          case 7:\n            setUserId(id);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken, userId;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userToken\"));\n\n            case 2:\n              userToken = _context3.sent;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userId\"));\n\n            case 5:\n              userId = _context3.sent;\n              setUserToken(userToken);\n              setUserId(userId);\n              setIsLoading(false);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  if (isLoading === true) {\n    return null;\n  }\n\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      children: userToken === null ? _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"SignIn\",\n          children: function children() {\n            return _jsx(SignInScreen, {\n              setToken: setToken,\n              setId: setId\n            });\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"SignUp\",\n          children: function children() {\n            return _jsx(SignUpScreen, {\n              setToken: setToken,\n              setId: setId\n            });\n          }\n        })]\n      }) : _jsx(Stack.Screen, {\n        name: \"Tab\",\n        options: {\n          headerShown: false\n        },\n        children: function children() {\n          return _jsxs(Tab.Navigator, {\n            screenOptions: {\n              headerShown: false,\n              tabBarActiveTintColor: \"tomato\",\n              tabBarInactiveTintColor: \"gray\"\n            },\n            children: [_jsx(Tab.Screen, {\n              name: \"TabHome\",\n              options: {\n                tabBarLabel: \"Home\",\n                tabBarIcon: function tabBarIcon(_ref) {\n                  var color = _ref.color,\n                      size = _ref.size;\n                  return _jsx(Ionicons, {\n                    name: \"ios-home\",\n                    size: size,\n                    color: color\n                  });\n                }\n              },\n              children: function children() {\n                return _jsxs(Stack.Navigator, {\n                  children: [_jsx(Stack.Screen, {\n                    name: \"Home\",\n                    options: {\n                      title: \"Airbnb\",\n                      headerStyle: {\n                        backgroundColor: \"white\"\n                      },\n                      headerTitleStyle: {\n                        color: \"grey\"\n                      }\n                    },\n                    children: function children() {\n                      return _jsx(HomeScreen, {});\n                    }\n                  }), _jsx(Stack.Screen, {\n                    name: \"Room\",\n                    options: {\n                      title: \"Room\"\n                    },\n                    children: function children(props) {\n                      return _jsx(RoomScreen, _objectSpread({}, props));\n                    }\n                  }), _jsx(Stack.Screen, {\n                    name: \"Profile\",\n                    options: {\n                      title: \"User Profile\"\n                    },\n                    children: function children() {\n                      return _jsx(ProfileScreen, {});\n                    }\n                  })]\n                });\n              }\n            }), _jsx(Tab.Screen, {\n              name: \"TabAroundMe\",\n              options: {\n                tabBarLabel: \"Around Me\",\n                tabBarIcon: function tabBarIcon(_ref2) {\n                  var color = _ref2.color,\n                      size = _ref2.size;\n                  return _jsx(Ionicons, {\n                    name: \"ios-location-outline\",\n                    size: size,\n                    color: color\n                  });\n                }\n              },\n              children: function children() {\n                return _jsxs(Stack.Navigator, {\n                  children: [_jsx(Stack.Screen, {\n                    name: \"Around Me\",\n                    options: {\n                      title: \"Around Me\",\n                      headerStyle: {\n                        backgroundColor: \"white\"\n                      },\n                      headerTitleStyle: {\n                        color: \"grey\"\n                      }\n                    },\n                    children: function children() {\n                      return _jsx(AroundMeScreen, {});\n                    }\n                  }), _jsx(Stack.Screen, {\n                    name: \"Home\",\n                    options: {\n                      title: \"Airbnb\",\n                      headerStyle: {\n                        backgroundColor: \"white\"\n                      },\n                      headerTitleStyle: {\n                        color: \"grey\"\n                      }\n                    },\n                    children: function children() {\n                      return _jsx(HomeScreen, {});\n                    }\n                  }), _jsx(Stack.Screen, {\n                    name: \"Room\",\n                    options: {\n                      title: \"Room\"\n                    },\n                    children: function children(props) {\n                      return _jsx(RoomScreen, _objectSpread({}, props));\n                    }\n                  }), _jsx(Stack.Screen, {\n                    name: \"Profile\",\n                    options: {\n                      title: \"User Profile\"\n                    },\n                    children: function children() {\n                      return _jsx(ProfileScreen, {});\n                    }\n                  })]\n                });\n              }\n            }), _jsx(Tab.Screen, {\n              name: \"TabProfile\",\n              options: {\n                tabBarLabel: \"My Profile\",\n                tabBarIcon: function tabBarIcon(_ref3) {\n                  var color = _ref3.color,\n                      size = _ref3.size;\n                  return _jsx(Ionicons, {\n                    name: \"ios-person-outline\",\n                    size: size,\n                    color: color\n                  });\n                }\n              },\n              children: function children() {\n                return _jsx(Stack.Navigator, {\n                  children: _jsx(Stack.Screen, {\n                    name: \"Profile\",\n                    options: {\n                      title: \"My Profile\"\n                    },\n                    children: function children() {\n                      return _jsx(ProfileScreen, {\n                        token: userToken,\n                        id: userId,\n                        setId: setId,\n                        setToken: setToken\n                      });\n                    }\n                  })\n                });\n              }\n            })]\n          });\n        }\n      })\n    })\n  });\n}","map":{"version":3,"sources":["/Users/vdnj/Documents/le_reacteur/react-native/airbnb/App.js"],"names":["React","useState","useEffect","AsyncStorage","NavigationContainer","createNativeStackNavigator","createBottomTabNavigator","Ionicons","HomeScreen","ProfileScreen","SignInScreen","SignUpScreen","SettingsScreen","SplashScreen","RoomScreen","AroundMeScreen","Tab","Stack","App","isLoading","setIsLoading","userToken","setUserToken","userId","setUserId","setToken","token","setItem","removeItem","setId","id","bootstrapAsync","getItem","headerShown","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarLabel","tabBarIcon","color","size","title","headerStyle","backgroundColor","headerTitleStyle","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport HomeScreen from \"./containers/HomeScreen\";\nimport ProfileScreen from \"./containers/ProfileScreen\";\nimport SignInScreen from \"./containers/SignInScreen\";\nimport SignUpScreen from \"./containers/SignUpScreen\";\nimport SettingsScreen from \"./containers/SettingsScreen\";\nimport SplashScreen from \"./containers/SplashScreen\";\nimport RoomScreen from \"./containers/RoomScreen\";\nimport AroundMeScreen from \"./containers/AroundMeScreen\";\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [userToken, setUserToken] = useState(null);\n  const [userId, setUserId] = useState(null);\n\n  const setToken = async (token) => {\n    if (token) {\n      await AsyncStorage.setItem(\"userToken\", token);\n    } else {\n      await AsyncStorage.removeItem(\"userToken\");\n    }\n\n    setUserToken(token);\n  };\n\n  const setId = async (id) => {\n    if (id) {\n      await AsyncStorage.setItem(\"userId\", id);\n    } else {\n      await AsyncStorage.removeItem(\"userId\");\n    }\n\n    setUserId(id);\n  };\n\n  useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      // We should also handle error for production apps\n      const userToken = await AsyncStorage.getItem(\"userToken\");\n      const userId = await AsyncStorage.getItem(\"userId\");\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      setUserToken(userToken);\n      setUserId(userId);\n\n      setIsLoading(false);\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  if (isLoading === true) {\n    // We haven't finished checking for the token yet\n    return null;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        {userToken === null ? (\n          // No token found, user isn't signed in\n          <>\n            <Stack.Screen name=\"SignIn\">\n              {() => <SignInScreen setToken={setToken} setId={setId} />}\n            </Stack.Screen>\n            <Stack.Screen name=\"SignUp\">\n              {() => <SignUpScreen setToken={setToken} setId={setId} />}\n            </Stack.Screen>\n          </>\n        ) : (\n          // User is signed in ! 🎉\n          <Stack.Screen name=\"Tab\" options={{ headerShown: false }}>\n            {() => (\n              <Tab.Navigator\n                screenOptions={{\n                  headerShown: false,\n                  tabBarActiveTintColor: \"tomato\",\n                  tabBarInactiveTintColor: \"gray\",\n                }}\n              >\n                <Tab.Screen\n                  name=\"TabHome\"\n                  options={{\n                    tabBarLabel: \"Home\",\n                    tabBarIcon: ({ color, size }) => (\n                      <Ionicons name={\"ios-home\"} size={size} color={color} />\n                    ),\n                  }}\n                >\n                  {() => (\n                    <Stack.Navigator>\n                      <Stack.Screen\n                        name=\"Home\"\n                        options={{\n                          title: \"Airbnb\",\n                          headerStyle: { backgroundColor: \"white\" },\n                          headerTitleStyle: { color: \"grey\" },\n                        }}\n                      >\n                        {() => <HomeScreen />}\n                      </Stack.Screen>\n                      <Stack.Screen\n                        name=\"Room\"\n                        options={{\n                          title: \"Room\",\n                        }}\n                      >\n                        {(props) => <RoomScreen {...props} />}\n                      </Stack.Screen>\n\n                      <Stack.Screen\n                        name=\"Profile\"\n                        options={{\n                          title: \"User Profile\",\n                        }}\n                      >\n                        {() => <ProfileScreen />}\n                      </Stack.Screen>\n                    </Stack.Navigator>\n                  )}\n                </Tab.Screen>\n\n                <Tab.Screen\n                  name=\"TabAroundMe\"\n                  options={{\n                    tabBarLabel: \"Around Me\",\n                    tabBarIcon: ({ color, size }) => (\n                      <Ionicons\n                        name={\"ios-location-outline\"}\n                        size={size}\n                        color={color}\n                      />\n                    ),\n                  }}\n                >\n                  {() => (\n                    <Stack.Navigator>\n                      <Stack.Screen\n                        name=\"Around Me\"\n                        options={{\n                          title: \"Around Me\",\n                          headerStyle: { backgroundColor: \"white\" },\n                          headerTitleStyle: { color: \"grey\" },\n                        }}\n                      >\n                        {() => <AroundMeScreen />}\n                      </Stack.Screen>\n                      <Stack.Screen\n                        name=\"Home\"\n                        options={{\n                          title: \"Airbnb\",\n                          headerStyle: { backgroundColor: \"white\" },\n                          headerTitleStyle: { color: \"grey\" },\n                        }}\n                      >\n                        {() => <HomeScreen />}\n                      </Stack.Screen>\n                      <Stack.Screen\n                        name=\"Room\"\n                        options={{\n                          title: \"Room\",\n                        }}\n                      >\n                        {(props) => <RoomScreen {...props} />}\n                      </Stack.Screen>\n\n                      <Stack.Screen\n                        name=\"Profile\"\n                        options={{\n                          title: \"User Profile\",\n                        }}\n                      >\n                        {() => <ProfileScreen />}\n                      </Stack.Screen>\n                    </Stack.Navigator>\n                  )}\n                </Tab.Screen>\n\n                <Tab.Screen\n                  name=\"TabProfile\"\n                  options={{\n                    tabBarLabel: \"My Profile\",\n                    tabBarIcon: ({ color, size }) => (\n                      <Ionicons\n                        name={\"ios-person-outline\"}\n                        size={size}\n                        color={color}\n                      />\n                    ),\n                  }}\n                >\n                  {() => (\n                    <Stack.Navigator>\n                      <Stack.Screen\n                        name=\"Profile\"\n                        options={{\n                          title: \"My Profile\",\n                        }}\n                      >\n                        {() => (\n                          <ProfileScreen\n                            token={userToken}\n                            id={userId}\n                            setId={setId}\n                            setToken={setToken}\n                          />\n                        )}\n                      </Stack.Screen>\n                    </Stack.Navigator>\n                  )}\n                </Tab.Screen>\n              </Tab.Navigator>\n            )}\n          </Stack.Screen>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}